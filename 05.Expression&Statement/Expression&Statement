# 표헌식과 문(Expression & Statement)

### 1. 값
 - 값은 표현식이 평가되어 생성된 결과를 말함
 - 값이 생성되는 가장 기본적인 방법은 리터럴을 사용하는 것이며, 리터럴은 사람이 이해할 수 있는 문자 혹은 약속된 기호를 사용해 값을 생성하는 표기법을 말함
 - JS 엔진은 코드가 실행되는 시점인 런타임에 리터럴을 평가해 값을 생성한다.

### 2. 표현식
 - 값으로 평가될 수 있는 문을 표현식이라 함(함수도 표현식이다.)
 - 표현식이 평가되면 새로운 값을 생성하거나 기존 값을 참조함
```javascript
    //      리터럴 연산자 리터럴
    let score = 50  + 50;
    
    // 리터럴 표현식
    10;
    'Hello';
    
    //식별자 표현식(선언이 이미 존재한다고 가정)
    sum;
    person.name;
    arr[1];
    
    // 연산자 표현식
    10 + 20;
    sum = 10;
    sum !== 10;
    
    //함수&메서드 호출 (선언이 이미 존재한다고 가정)
    square();
    person.getName();
```

### 3. 문(Statement)
 - 프로그램을 구성하는 기본 단위이자 최소 실행단위이다
 - 문은 여러 토큰으로 구성되며, 토큰이랑 문법적인 의미를 가지고 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소를 의미한다.
```javascript
   //하나 하나를 토큰이라 함
    let sum = 1 + 2; // 문
```
- 세미콜론은 문의 종료를 나타낸다.
- 또한, 세미콜론은 생략 가능하다. JS 엔진이 소스코드를 해석할 때 문의 끝이라고 예측되는 지점에 세미콜론을 자동으로 붙여주는 세미콜론 자동 삽입 기능이 암묵적으로 수행되기 때문이다.

### 4. 표현식인 문과 표현식이 아닌 문
 - 표현식인 문과 표현식이 아닌 문을 구별하는 가장 간단하고 명료한 방법은 변수에 할당해 보는 것이다.
```javascript
    // 변수 선언문은 표현식이 아닌 문이다.
    let x;
    // 할당문은 그 자체가 표현식이지만 완전한 문이기도 함
    x = 100;
```
